from django.core.cache import cache


def set_alert_in_redis(email, symbol, alert_id, price):
    """
    The set_alert_in_redis function takes in an email, symbol, alert_id and price.
    It then creates a key using the alert_id, email and symbol. It then sets that key to the value of price.

    :param email: Identify the user
    :param symbol: Identify the stock symbol
    :param alert_id: Uniquely identify the alert
    :param price: Set the value of the key in redis
    :return: None
    """
    key = f'{alert_id}_{email}_{symbol}'
    cache.set(key=key, value=price)


def get_alert_from_redis(email, symbol, alert_id):
    """
    The get_alert_from_redis function takes in an email, symbol and alert_id as parameters.
    It then creates a key using the alert_id, email and symbol. It then checks if there is a value for that key in redis cache.
    If there is a value it returns True else it returns False.

    :param email: Identify the user
    :param symbol: Get the stock price from yahoo finance
    :param alert_id: Create a unique key for the alert in redis
    :return: True if the alert is already in redis
    """
    key = f'{alert_id}_{email}_{symbol}'
    val = cache.get(key=key)
    if val:
        return True
    return False


def delete_alert_from_redis(email, symbol, alert_id):
    """
    The delete_alert_from_redis function deletes an alert from the Redis cache.

        Parameters:
            email (str): The user's email address.
            symbol (str): The stock symbol for which the alert was created.
            alert_id (int): A unique identifier for each individual alert that is generated by a database sequence.

    :param email: Identify the user
    :param symbol: Identify the stock symbol
    :param alert_id: Uniquely identify the alert
    :return: Nothing
    """
    key = f'{alert_id}_{email}_{symbol}'
    cache.delete(key=key)
